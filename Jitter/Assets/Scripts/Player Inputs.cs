//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Inputs"",
    ""maps"": [
        {
            ""name"": ""Unequipped"",
            ""id"": ""ed2bf30b-2504-432d-a1bb-bb75e9f34cc4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""64306cb2-efa4-4024-b6e4-55449041ebd0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f3c4486a-6189-4dcf-b8d7-d7d0ed309c15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""6c5232ed-e6d6-46d0-bcaa-2e983ef21a64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchSlide"",
                    ""type"": ""Button"",
                    ""id"": ""02b91488-7b2b-4fcc-abc9-434d164c73e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""a515399a-3d71-416f-8002-5349ced12153"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""1b262f78-82bb-4ac1-a1ef-38d4a235dbdb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f66a64ea-9386-4bb2-9f33-af7d7e0cb01a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76a77cab-052e-44bb-871a-5f2d79beaaec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7f2678a9-c546-4639-beda-5ae6641f8da4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad215d79-aab9-47e1-aea1-e904e25c2654"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""79c35496-5951-4033-b5b0-1648d6f9d663"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4f44ff90-cd38-4581-ac35-44b632e99f95"",
                    ""path"": ""<Keyboard>/#(')"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""507f024c-89cb-4c9f-81be-5c804a4704e4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""add5fd25-d92c-42c6-87a2-822c90c025f0"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55e68bec-ccf4-44cf-b98b-661027778eb9"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a89ef321-b672-4042-a51e-0573a7b18297"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8352207b-1f01-4a9c-9515-f326d0c4714b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e293d56-a4d1-41ff-b229-77e9a43f44c2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f012ee8-0745-4bb1-b90c-bd2de4a0a167"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Knife"",
            ""id"": ""4f11da79-ac0f-44ba-9157-d4b53a8a5491"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d6a4964d-014c-4f73-b0e8-17ebcf5ebbe2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""16600b44-9258-4c38-afe4-4d253259aa80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""9340b746-4d7c-442e-951e-b57c4c42c86b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchSlide"",
                    ""type"": ""Button"",
                    ""id"": ""c6cbbf79-353b-4278-940a-b5f035251662"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""c13cbcc8-05b0-4b98-99ec-336e948c056d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""dd2f380e-62cb-43df-a4de-04434a647dd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""1c1bcd4f-14fc-4c62-80a6-ddb2854abd9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c34e5e1a-bf44-449b-bf42-41231557ad48"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c31eecc2-5680-49db-afce-d7419a1b66ca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""96f4a505-43ea-4411-81e4-03d0b7e58439"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a1dd86d1-266b-44c3-b7d4-d425c3ac44ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""183cd215-c671-4c55-903e-53c63dedeb20"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7746134e-ec5f-4644-ad00-4404b4cb61fc"",
                    ""path"": ""<Keyboard>/#(')"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61eb573e-b3cf-4215-9230-e34e1676f985"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41e6a7da-484a-4862-89c7-6a6327e1d828"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77193320-081d-4113-ab4c-31a000c0a1c1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52f07db5-257d-4305-af53-9bb0a0077fc5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35019379-0153-4d69-9955-9e951a95327b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d9c3385-c36f-4d8a-9698-c53e1109b220"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da590f79-dfde-4381-9e99-d3ed11eb9466"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Rifle"",
            ""id"": ""86008410-925b-455f-aa5a-8c6cb8b50a1c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6cdb476f-819b-4717-a7a0-3fcebe3cdfbe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c2e8922b-a192-49c0-85f2-71a2c6662e36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""54ee6add-bdb9-45e1-8952-aaf0c1737873"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchSlide"",
                    ""type"": ""Button"",
                    ""id"": ""c27e97b2-5ae7-4b73-b521-02fb7f52f362"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""e4a47361-79ae-40e5-8596-61e8fb89dcc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""214094e6-9cfd-48c5-81da-06d45ecc868a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""124ab4f1-d8fa-4306-a524-dfac1a430f56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""d0187d04-5e9d-4174-a52b-01b0801d5343"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5fb830b6-69f0-4f2f-9ace-9e5331d046d6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""30ab035f-634b-43bc-b64f-895fd5846d4c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a22a5ae3-cc7c-47f6-a6ab-e37fd168e67c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""01fe65bb-6a8c-4426-94d0-b1bfba3ec980"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""435546ea-a0af-4fde-84d6-1fdfdafd34ee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""40103d99-3c8d-4a04-ba50-022d889854fe"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a66f5ab-7eda-43f5-98c4-31b33cccad1e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03445390-f651-45e3-bce8-ab70bd45391b"",
                    ""path"": ""<Keyboard>/#(')"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88ceda97-afdc-4f76-a21d-23c6e911c462"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1df9885-1337-4dc0-85c1-825c3d44789a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42806e13-7232-42b2-aeb0-870ba32afcfa"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe62c845-2cd6-4c34-993e-09fbcf647fda"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c4f52d0-2a8a-40c8-a8d0-7c1203212000"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b729c983-c95d-4dbc-a9c4-4102c4d21d72"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Unequipped
        m_Unequipped = asset.FindActionMap("Unequipped", throwIfNotFound: true);
        m_Unequipped_Move = m_Unequipped.FindAction("Move", throwIfNotFound: true);
        m_Unequipped_Jump = m_Unequipped.FindAction("Jump", throwIfNotFound: true);
        m_Unequipped_Run = m_Unequipped.FindAction("Run", throwIfNotFound: true);
        m_Unequipped_CrouchSlide = m_Unequipped.FindAction("CrouchSlide", throwIfNotFound: true);
        m_Unequipped_Focus = m_Unequipped.FindAction("Focus", throwIfNotFound: true);
        m_Unequipped_Punch = m_Unequipped.FindAction("Punch", throwIfNotFound: true);
        // Knife
        m_Knife = asset.FindActionMap("Knife", throwIfNotFound: true);
        m_Knife_Move = m_Knife.FindAction("Move", throwIfNotFound: true);
        m_Knife_Jump = m_Knife.FindAction("Jump", throwIfNotFound: true);
        m_Knife_Run = m_Knife.FindAction("Run", throwIfNotFound: true);
        m_Knife_CrouchSlide = m_Knife.FindAction("CrouchSlide", throwIfNotFound: true);
        m_Knife_Focus = m_Knife.FindAction("Focus", throwIfNotFound: true);
        m_Knife_LightAttack = m_Knife.FindAction("LightAttack", throwIfNotFound: true);
        m_Knife_HeavyAttack = m_Knife.FindAction("HeavyAttack", throwIfNotFound: true);
        // Rifle
        m_Rifle = asset.FindActionMap("Rifle", throwIfNotFound: true);
        m_Rifle_Move = m_Rifle.FindAction("Move", throwIfNotFound: true);
        m_Rifle_Jump = m_Rifle.FindAction("Jump", throwIfNotFound: true);
        m_Rifle_Run = m_Rifle.FindAction("Run", throwIfNotFound: true);
        m_Rifle_CrouchSlide = m_Rifle.FindAction("CrouchSlide", throwIfNotFound: true);
        m_Rifle_Punch = m_Rifle.FindAction("Punch", throwIfNotFound: true);
        m_Rifle_ADS = m_Rifle.FindAction("ADS", throwIfNotFound: true);
        m_Rifle_Shoot = m_Rifle.FindAction("Shoot", throwIfNotFound: true);
        m_Rifle_Reload = m_Rifle.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Unequipped
    private readonly InputActionMap m_Unequipped;
    private List<IUnequippedActions> m_UnequippedActionsCallbackInterfaces = new List<IUnequippedActions>();
    private readonly InputAction m_Unequipped_Move;
    private readonly InputAction m_Unequipped_Jump;
    private readonly InputAction m_Unequipped_Run;
    private readonly InputAction m_Unequipped_CrouchSlide;
    private readonly InputAction m_Unequipped_Focus;
    private readonly InputAction m_Unequipped_Punch;
    public struct UnequippedActions
    {
        private @PlayerInputs m_Wrapper;
        public UnequippedActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Unequipped_Move;
        public InputAction @Jump => m_Wrapper.m_Unequipped_Jump;
        public InputAction @Run => m_Wrapper.m_Unequipped_Run;
        public InputAction @CrouchSlide => m_Wrapper.m_Unequipped_CrouchSlide;
        public InputAction @Focus => m_Wrapper.m_Unequipped_Focus;
        public InputAction @Punch => m_Wrapper.m_Unequipped_Punch;
        public InputActionMap Get() { return m_Wrapper.m_Unequipped; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnequippedActions set) { return set.Get(); }
        public void AddCallbacks(IUnequippedActions instance)
        {
            if (instance == null || m_Wrapper.m_UnequippedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnequippedActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @CrouchSlide.started += instance.OnCrouchSlide;
            @CrouchSlide.performed += instance.OnCrouchSlide;
            @CrouchSlide.canceled += instance.OnCrouchSlide;
            @Focus.started += instance.OnFocus;
            @Focus.performed += instance.OnFocus;
            @Focus.canceled += instance.OnFocus;
            @Punch.started += instance.OnPunch;
            @Punch.performed += instance.OnPunch;
            @Punch.canceled += instance.OnPunch;
        }

        private void UnregisterCallbacks(IUnequippedActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @CrouchSlide.started -= instance.OnCrouchSlide;
            @CrouchSlide.performed -= instance.OnCrouchSlide;
            @CrouchSlide.canceled -= instance.OnCrouchSlide;
            @Focus.started -= instance.OnFocus;
            @Focus.performed -= instance.OnFocus;
            @Focus.canceled -= instance.OnFocus;
            @Punch.started -= instance.OnPunch;
            @Punch.performed -= instance.OnPunch;
            @Punch.canceled -= instance.OnPunch;
        }

        public void RemoveCallbacks(IUnequippedActions instance)
        {
            if (m_Wrapper.m_UnequippedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnequippedActions instance)
        {
            foreach (var item in m_Wrapper.m_UnequippedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnequippedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnequippedActions @Unequipped => new UnequippedActions(this);

    // Knife
    private readonly InputActionMap m_Knife;
    private List<IKnifeActions> m_KnifeActionsCallbackInterfaces = new List<IKnifeActions>();
    private readonly InputAction m_Knife_Move;
    private readonly InputAction m_Knife_Jump;
    private readonly InputAction m_Knife_Run;
    private readonly InputAction m_Knife_CrouchSlide;
    private readonly InputAction m_Knife_Focus;
    private readonly InputAction m_Knife_LightAttack;
    private readonly InputAction m_Knife_HeavyAttack;
    public struct KnifeActions
    {
        private @PlayerInputs m_Wrapper;
        public KnifeActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Knife_Move;
        public InputAction @Jump => m_Wrapper.m_Knife_Jump;
        public InputAction @Run => m_Wrapper.m_Knife_Run;
        public InputAction @CrouchSlide => m_Wrapper.m_Knife_CrouchSlide;
        public InputAction @Focus => m_Wrapper.m_Knife_Focus;
        public InputAction @LightAttack => m_Wrapper.m_Knife_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_Knife_HeavyAttack;
        public InputActionMap Get() { return m_Wrapper.m_Knife; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KnifeActions set) { return set.Get(); }
        public void AddCallbacks(IKnifeActions instance)
        {
            if (instance == null || m_Wrapper.m_KnifeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KnifeActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @CrouchSlide.started += instance.OnCrouchSlide;
            @CrouchSlide.performed += instance.OnCrouchSlide;
            @CrouchSlide.canceled += instance.OnCrouchSlide;
            @Focus.started += instance.OnFocus;
            @Focus.performed += instance.OnFocus;
            @Focus.canceled += instance.OnFocus;
            @LightAttack.started += instance.OnLightAttack;
            @LightAttack.performed += instance.OnLightAttack;
            @LightAttack.canceled += instance.OnLightAttack;
            @HeavyAttack.started += instance.OnHeavyAttack;
            @HeavyAttack.performed += instance.OnHeavyAttack;
            @HeavyAttack.canceled += instance.OnHeavyAttack;
        }

        private void UnregisterCallbacks(IKnifeActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @CrouchSlide.started -= instance.OnCrouchSlide;
            @CrouchSlide.performed -= instance.OnCrouchSlide;
            @CrouchSlide.canceled -= instance.OnCrouchSlide;
            @Focus.started -= instance.OnFocus;
            @Focus.performed -= instance.OnFocus;
            @Focus.canceled -= instance.OnFocus;
            @LightAttack.started -= instance.OnLightAttack;
            @LightAttack.performed -= instance.OnLightAttack;
            @LightAttack.canceled -= instance.OnLightAttack;
            @HeavyAttack.started -= instance.OnHeavyAttack;
            @HeavyAttack.performed -= instance.OnHeavyAttack;
            @HeavyAttack.canceled -= instance.OnHeavyAttack;
        }

        public void RemoveCallbacks(IKnifeActions instance)
        {
            if (m_Wrapper.m_KnifeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKnifeActions instance)
        {
            foreach (var item in m_Wrapper.m_KnifeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KnifeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KnifeActions @Knife => new KnifeActions(this);

    // Rifle
    private readonly InputActionMap m_Rifle;
    private List<IRifleActions> m_RifleActionsCallbackInterfaces = new List<IRifleActions>();
    private readonly InputAction m_Rifle_Move;
    private readonly InputAction m_Rifle_Jump;
    private readonly InputAction m_Rifle_Run;
    private readonly InputAction m_Rifle_CrouchSlide;
    private readonly InputAction m_Rifle_Punch;
    private readonly InputAction m_Rifle_ADS;
    private readonly InputAction m_Rifle_Shoot;
    private readonly InputAction m_Rifle_Reload;
    public struct RifleActions
    {
        private @PlayerInputs m_Wrapper;
        public RifleActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Rifle_Move;
        public InputAction @Jump => m_Wrapper.m_Rifle_Jump;
        public InputAction @Run => m_Wrapper.m_Rifle_Run;
        public InputAction @CrouchSlide => m_Wrapper.m_Rifle_CrouchSlide;
        public InputAction @Punch => m_Wrapper.m_Rifle_Punch;
        public InputAction @ADS => m_Wrapper.m_Rifle_ADS;
        public InputAction @Shoot => m_Wrapper.m_Rifle_Shoot;
        public InputAction @Reload => m_Wrapper.m_Rifle_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Rifle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RifleActions set) { return set.Get(); }
        public void AddCallbacks(IRifleActions instance)
        {
            if (instance == null || m_Wrapper.m_RifleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RifleActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @CrouchSlide.started += instance.OnCrouchSlide;
            @CrouchSlide.performed += instance.OnCrouchSlide;
            @CrouchSlide.canceled += instance.OnCrouchSlide;
            @Punch.started += instance.OnPunch;
            @Punch.performed += instance.OnPunch;
            @Punch.canceled += instance.OnPunch;
            @ADS.started += instance.OnADS;
            @ADS.performed += instance.OnADS;
            @ADS.canceled += instance.OnADS;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IRifleActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @CrouchSlide.started -= instance.OnCrouchSlide;
            @CrouchSlide.performed -= instance.OnCrouchSlide;
            @CrouchSlide.canceled -= instance.OnCrouchSlide;
            @Punch.started -= instance.OnPunch;
            @Punch.performed -= instance.OnPunch;
            @Punch.canceled -= instance.OnPunch;
            @ADS.started -= instance.OnADS;
            @ADS.performed -= instance.OnADS;
            @ADS.canceled -= instance.OnADS;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IRifleActions instance)
        {
            if (m_Wrapper.m_RifleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRifleActions instance)
        {
            foreach (var item in m_Wrapper.m_RifleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RifleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RifleActions @Rifle => new RifleActions(this);
    public interface IUnequippedActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouchSlide(InputAction.CallbackContext context);
        void OnFocus(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
    }
    public interface IKnifeActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouchSlide(InputAction.CallbackContext context);
        void OnFocus(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
    }
    public interface IRifleActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouchSlide(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
        void OnADS(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
